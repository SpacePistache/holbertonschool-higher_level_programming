The 2-matrix_divided module
==========================

Using matrix_divided function
----------------------------

Import the function:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Basic matrix division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Verify original matrix is unchanged:
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Division with floating-point number:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

Division by infinity:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Error handling for missing arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Error handling for missing one argument:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]])
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Error handling for non-matrix input:
    >>> matrix_divided("not a matrix", 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Error handling for matrix with non-numeric elements:
    >>> matrix_divided([[1, 2, 3], [4, "5", 6]], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Error handling for matrix with unequal row sizes:
    >>> matrix_divided([[1, 2], [3, 4, 5]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Error handling for non-numeric divisor:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "3")
    Traceback (most recent call last):
    TypeError: div must be a number

Error handling for division by zero:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero